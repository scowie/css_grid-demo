module.exports = {
  
  "failOnError": true,

  // http://eslint.org/docs/rules/
  "parserOptions": {
    "sourceType": "module",
  },
  "env": {
    "es6": true, // enable all ES6 features
  },
 "plugins": ["html"],

  "rules": {

    /**************************************
     * Rules for Possible Errors
     *************************************/

    // enabled rules
    "no-cond-assign"          : 2, // disallow assignment in conditional expressions
    "no-empty"                : 2, // disallow empty statements
    "no-dupe-keys"            : 2, // disallow duplicate keys when creating object literals
    "no-constant-condition"   : 2, // disallow use of constant expressions in conditions
    "no-empty-character-class": 2, // disallow the use of empty character classes in regular expressions
    "no-ex-assign"            : 2, // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast"   : 2, // disallow double-negation boolean casts in a boolean context
    "no-extra-semi"           : 2, // disallow unnecessary semicolons
    "no-func-assign"          : 2, // disallow overwriting functions written as function declarations
    "no-control-regex"        : 2, // disallow control characters in regular expressions
    "no-inner-declarations"   : 2, // disallow function or variable declarations in nested blocks
    "no-invalid-regexp"       : 2, // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace" : 2, // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs"       : 2, // disallow negation of the left operand of an in expression
    "no-obj-calls"            : 2, // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces"         : 2, // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays"        : 2, // disallow sparse arrays
    "no-unexpected-multiline" : 2, // disallow code that looks like two expressions but is actually one
    "no-unreachable"          : 2, // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan"               : 2, // disallow comparisons with the value NaN
    "valid-typeof"            : 2, // Ensure that the results of typeof are compared against a valid string

    // disabled rules
    "no-comma-dangle"         : 0, // disallow trailing commas in object literals
    "no-console"              : 1, // disallow use of console (off by default in the node environment)
    "no-debugger"             : 1, // disallow use of debugger
    "no-extra-parens"         : 0, // disallow unnecessary parentheses (off by default)
    "valid-jsdoc"             : 0, // Ensure JSDoc comments are valid (off by default)

    /**************************************
     * Rules for Best Practices
     *************************************/

    // enable best practices
    "consistent-return"           : 2, // require return statements to either always or never specify values
    "eqeqeq"                      : 0, // require use of === and !==
    "accessor-pairs"              : 2, // enforce getter/setter pairs in objects
    "complexity"                  : ["error", { "max": 10}], // specify the maximum cyclomatic complexity allowed in a program
    "array-callback-return"       : 2, // enforce return statements in callbacks of arrayâ€™s methods
    "no-alert"                    : 2, // disallow use of alert, confirm, and prompt
    "no-caller"                   : 2, // disallow use of arguments.caller or arguments.callee
    "no-case-declarations"        : 2, // disallow lexical declarations in case clauses
    "no-div-regex"                : 2, // disallow division operators explicitly at beginning of regular expression
    "no-else-return"              : 2, // disallow else after a return in an if
    "no-empty-function"           : 2, // disallow use of empty functions
    "no-empty-pattern"            : 2, // disallow use of empty destructuring patterns
    "no-eq-null"                  : 2, // disallow comparisons to null without a type-checking operator
    "no-eval"                     : 2, // disallow use of eval()
    "no-extend-native"            : 2, // disallow adding to native types
    "no-extra-bind"               : 2, // disallow unnecessary function binding
    "no-extra-label"              : 2, // disallow unnecessary labels
    "no-fallthrough"              : 2, // disallow fallthrough of case statements
    "no-floating-decimal"         : 2, // disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-globals"         : 2, // disallow var and named functions in global scope
    "no-implied-eval"             : 2, // disallow use of eval()-like methods
    "no-iterator"                 : 2, // disallow usage of __iterator__ property
    "no-lone-blocks"              : 2, // disallow unnecessary nested blocks
    "no-labels"                   : 2, // disallow use of labeled statements
    "no-new"                      : 2, // disallow use of the new operator when not part of an assignment or comparison
    "no-new-wrappers"             : 2, // disallow creating new instances of String,Number, and Boolean
    "no-octal"                    : 2, // disallow use of octal literals
    "no-octal-escape"             : 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-proto"                    : 2, // disallow usage of __proto__ property
    "no-redeclare"                : 2, // disallow declaring the same variable more than once
    "no-script-url"               : 2, // disallow use of javascript": 0 // urls.
    "no-self-assign"              : 2, // disallow assignments where both sides are exactly the same
    "no-self-compare"             : 2, // disallow comparisons where both sides are exactly the same
    "no-sequences"                : 2, // disallow use of the comma operator
    "no-throw-literal"            : 2, // restrict what can be thrown as an exception
    "no-unmodified-loop-condition": 2, // disallow unmodified conditions of loops
    "no-unused-expressions"       : 2, // disallow usage of expressions in statement position
    "no-unused-labels"            : 2, // disallow unused labels
    "no-useless-call"             : 2, // disallow unnecessary .call() and .apply()
    "no-useless-concat"           : 2, // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape"           : 2, // disallow unnecessary usage of escape character
    "no-void"                     : 2, // disallow use of the void operator
    "wrap-iife"                   : 2, // require immediate function invocation to be wrapped in parentheses

    // disabled best practices
    //"no-return-assign"          : 2, // disallow use of assignment in return statement
    "default-case"                : 0,  // require default case in switch statements
    "block-scoped-var"            : 0, // treat var statements as if they were block scoped
    "curly"                       : 0, // specify curly brace conventions for all control statements
    "dot-location"                : 0, // enforce consistent newlines before or after dots
    "dot-notation"                : 0, // encourage use of dot notation whenever possible
    "guard-for-in"                : 0, // ensure for-in loops have an if statement
    "no-implicit-coercion"        : 0, // disallow the type conversions with shorter notations
    "no-invalid-this"             : 0, // disallow this keywords outside of classes or class-like objects
    "no-loop-func"                : 0, // disallow creation of functions within loops
    "no-magic-numbers"            : 0, // disallow the use of magic numbers
    "no-multi-str"                : 0, // disallow use of multiline strings
    "no-native-reassign"          : 0, // disallow reassignments of native objects
    "no-multi-spaces"             : 0, // disallow use of multiple spaces
    "no-new-func"                 : 0, // disallow use of new operator for Function object
    "no-param-reassign"           : 0, // disallow reassignment of function parameters
    "no-warning-comments"         : 0, // disallow usage of configurable warning terms in comments": 0 // e.g. TODO or FIXME
    "no-with"                     : 0, // disallow use of the with statement
    "radix"                       : 0, // require use of the second argument for parseInt()
    "vars-on-top"                 : 0, // require declaration of all vars at the top of their containing scope
    "yoda"                        : 0, // require or disallow Yoda conditions

    /**************************************
     * Rules for Strict Mode
     *************************************/
    "strict": 2, // controls location of Use Strict Directives

    /**************************************
     * Rules for Variables
     *************************************/

    // enabled variable rules
    "no-unused-vars"            : ["error", { "args": "none" }], // disallow declaration of variables that are not used in the code
    "no-label-var"              : 2, // disallow labels that share a name with a variable
    "no-catch-shadow"           : 2, // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-undef-init"             : 2, // disallow use of undefined when initializing variables

    // disabled variable rules
    "no-use-before-define"      : 0, // disallow use of variables before they are defined
    "no-delete-var"             : 0, // disallow deletion of variables
    "no-shadow"                 : 0, // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 0, // disallow shadowing of names such as arguments
    "no-undef"                  : 0, // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undefined"              : 0, // disallow use of undefined variable (off by default)

    /**************************************
     * Node.js Rules (all disabled)
     *************************************/
    "handle-callback-err": 0,   // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": 0,     // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": 0,        // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": 0,        // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-exit": 0,       // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
    "no-sync": 0,               // disallow use of synchronous methods (off by default)

    /**************************************************
     * Rules for style enforcement (all disabled)
     *************************************************/

    "brace-style"              : 0, // enforce one true brace style (off by default)
    "camelcase"                : 0, // require camel case names
    "comma-spacing"            : 0, // enforce spacing before and after comma
    "comma-style"              : 0, // enforce one true comma style (off by default)
    "consistent-this"          : 0, // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last"                 : 0, // enforce newline at the end of file, with no multiple empty lines
    "func-names"               : 0, // require function expressions to have a name (off by default)
    "func-style"               : 0, // enforces use of function declarations or expressions (off by default)
    "key-spacing"              : 0, // enforces spacing between keys and values in object literal properties
    "max-nested-callbacks"     : 0, // specify the maximum depth callbacks can be nested (off by default)
    "new-cap"                  : 0, // require a capital letter for constructors
    "new-parens"               : 0, // disallow the omission of parentheses when invoking a constructor with no arguments
    "no-array-constructor"     : 0, // disallow use of the Array constructor
    "no-inline-comments"       : 0, // disallow comments inline after code (off by default)
    "no-lonely-if"             : 0, // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs" : 0, // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines"  : 0, // disallow multiple empty lines (off by default)
    "no-nested-ternary"        : 0, // disallow nested ternary expressions (off by default)
    "no-new-object"            : 0, // disallow use of the Object constructor
    "no-space-before-semi"     : 0, // disallow space before semicolon
    "no-spaced-func"           : 0, // disallow space between function identifier and application
    "no-ternary"               : 0, // disallow the use of ternary operators (off by default)
    "no-trailing-spaces"       : 0, // disallow trailing whitespace at the end of lines
    "no-underscore-dangle"     : 0, // disallow dangling underscores in identifiers
    "no-wrap-func"             : 0, // disallow wrapping of non-IIFE statements in parens
    "one-var"                  : 0, // allow just one var statement per function (off by default)
    "operator-assignment"      : 0, // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "padded-blocks"            : 0, // enforce padding within blocks (off by default)
    "quote-props"              : 0, // require quotes around object literal property names (off by default)
    "quotes"                   : 0, // specify whether double or single quotes should be used
    "semi"                     : 0, // require or disallow use of semicolons instead of ASI
    "sort-vars"                : 0, // sort variables within the same declaration block (off by default)
    "space-after-function-name": 0, // require a space after function names (off by default)
    "space-after-keywords"     : 0, // require a space after certain keywords (off by default)
    "space-before-blocks"      : 0, // require or disallow space before blocks (off by default)
    "space-in-brackets"        : 0, // require or disallow spaces inside brackets (off by default)
    "space-in-parens"          : 0, // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops"          : 0, // require spaces around operators
    "space-return-throw-case"  : 0, // require a space after return, throw, and case
    "space-unary-ops"          : 0, // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-line-comment"      : 0, // require or disallow a space immediately following the // in a line comment (off by default)
    "wrap-regex"               : 0, // require regex literals to be wrapped in parentheses (off by default)

    /*********************
     * ECMAScript 6
     ********************/

    // enabled ES6 rules
    "no-dupe-class-members" : 2, //disallow duplicate name in class members
    "no-duplicate-imports"  : 2, //disallow duplicate module imports
    "no-class-assign"       : 2, //disallow modifying variables of class declarations
    "no-const-assign"       : 2, //disallow modifying variables that are declared using const
    "no-this-before-super"  : 2, //disallow use of this/super before calling super() in constructors
    "no-useless-constructor": 2, //disallow unnecessary constructor

    // disabled ES6 rules
    "arrow-body-style"      : 0, //require braces in arrow function body
    "arrow-parens"          : 0, //require parens in arrow function arguments
    "arrow-spacing"         : 0, //require space before/after arrow functionâ€™s arrow
    "constructor-super"     : 0, //ensure calling of super() in constructors
    "generator-star-spacing": 0, //enforce spacing around the * in generator functions
    "no-confusing-arrow"    : 0, //disallow arrow functions where they could be confused with comparisons
    "no-new-symbol"         : 0, //disallow use of the new operator with the Symbol object
    "no-restricted-imports" : 0, //restrict usage of specified modules when loaded by import declaration
    "no-var"                : 0, //require let or const instead of var
    "object-shorthand"      : 0, //require method and property shorthand syntax for object literals
    "prefer-arrow-callback" : 0, //suggest using arrow functions as callbacks
    "prefer-const"          : 0, //suggest using const declaration for variables that are never reassigned after declared
    "prefer-reflect"        : 0, //suggest using Reflect methods where applicable
    "prefer-rest-params"    : 0, //suggest using the rest parameters instead of arguments
    "prefer-spread"         : 0, //suggest using the spread operator instead of .apply()
    "prefer-template"       : 0, //suggest using template literals instead of strings concatenation
    "require-yield"         : 0, //disallow generator functions that do not have yield
    "template-curly-spacing": 0, //enforce spacing around embedded expressions of template strings
    "yield-star-spacing"    : 0, //enforce spacing around the * in yield* expressions

  }
}
